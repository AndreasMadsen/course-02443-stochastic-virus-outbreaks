# warning nothing works as expected
# temp commit

import _setup

import scipy.stats
import math
import numpy as np
from sklearn.covariance import ShrunkCovariance
from sklearn.covariance import LedoitWolf
from sklearn.covariance import OAS

import sir
import world
from simulator import Simulator, State

state = State(world.regions, world.routes)
state.set_outbreak('Paris', 1000)

param_list = []
for i in range(0, 25):
    print("run {0}".format(i))
    sim = Simulator(state, transfer_prob=0.005, beta=2, gamma=0.5, verbose=True)
    param_est = sir.ParameterEstimator(sim.run(iterations=120), method='max')
    param_list.append(str(param_est))

for x in param_list:
    print(x)

testA = np.asarray([
    [2.561476, 2.561480, 7399998550, 1000, 7694, 5],
    [2.613079, 2.613082, 7399998550, 1000, 7539, 5],
    [2.638462, 2.638465, 7399998550, 1000, 7410, 5],
    [2.638206, 2.638210, 7399998550, 1000, 7449, 5],
    [2.625257, 2.625261, 7399998550, 1000, 7768, 5]

])

testB = np.asarray([
    [2.583907, 2.583911, 7399998550, 1000, 7991, 5],
    [2.640011, 2.640015, 7399998550, 1000, 7178, 5],
    [2.609513, 2.609517, 7399998550, 1000, 7337, 5],
    [2.688945, 2.688948, 7399998550, 1000, 7182, 5],
    [2.676046, 2.676050, 7399998550, 1000, 7143, 5]
])



dataAmax = np.asarray([
    # gamma,       beta,          N,    I, max_infected, max_infected_i
    [16.836345, 35.398210, 7399998550, 1000, 361573124, 52],
    [16.926252, 35.584379, 7399998550, 1000, 359635385, 53],
    [16.760196, 35.236293, 7399998550, 1000, 363204806, 52],
    [16.871690, 35.471595, 7399998550, 1000, 360810067, 53],
    [16.885823, 35.497692, 7399998550, 1000, 360486225, 53]

])

dataBmax = np.asarray([
    # gamma,       beta,          N,    I, max_infected, max_infected_i
    [16.751471, 35.217368, 7399998550, 1000, 363390410, 53],
    [16.774432, 35.265162, 7399998550, 1000, 362890055, 53],
    [16.883228, 35.494285, 7399998550, 1000, 360554001, 53],
    [17.038579, 35.821923, 7399998550, 1000, 357272789, 53],
    [16.817475, 35.354296, 7399998550, 1000, 361953038, 53]

])

N0Max = np.asarray([
    [16.921686, 35.575031, 7399998550, 1000, 359733948, 53],
    [16.725976, 35.164427, 7399998550, 1000, 363948376, 53],
    [16.994056, 35.727980, 7399998550, 1000, 358206776, 53],
    [16.858108, 35.434701, 7399998550, 1000, 361050212, 53],
    [16.680545, 35.065132, 7399998550, 1000, 364916209, 53],
    [17.077037, 35.902604, 7399998550, 1000, 356467155, 53],
    [16.710518, 35.130985, 7399998550, 1000, 364279204, 53],
    [16.805069, 35.329704, 7399998550, 1000, 362229321, 53],
    [16.591356, 34.876080, 7399998550, 1000, 366868074, 53],
    [16.693592, 35.095984, 7399998550, 1000, 364652189, 53],
    [16.661797, 35.030350, 7399998550, 1000, 365355525, 53],
    [17.079622, 35.905867, 7399998550, 1000, 356400394, 53],
    [17.043691, 35.830201, 7399998550, 1000, 357150964, 53],
    [16.722502, 35.150612, 7399998550, 1000, 363983881, 53],
    [17.039259, 35.821310, 7399998550, 1000, 357246395, 53],
    [17.037582, 35.817133, 7399998550, 1000, 357277709, 53],
    [16.589344, 34.875439, 7399998550, 1000, 366935026, 53],
    [16.998631, 35.732267, 7399998550, 1000, 358078593, 53],
    [16.599303, 34.895705, 7399998550, 1000, 366710697, 53],
    [17.046623, 35.838724, 7399998550, 1000, 357103525, 53],
    [16.970235, 35.677558, 7399998550, 1000, 358707554, 53],
    [16.807699, 35.334404, 7399998550, 1000, 362167575, 53],
    [16.804597, 35.331459, 7399998550, 1000, 362256238, 53],
    [16.635865, 34.976885, 7399998550, 1000, 365931613, 53],
    [16.882410, 35.488658, 7399998550, 1000, 360547869, 53]
])

a38Max = np.asarray([
    # gamma,       beta,          N,    I, max_infected, max_infected_i
 [16.678884, 35.064641, 7399998550, 1000, 364971129, 52],
 [16.411053, 34.501345, 7399998550, 1000, 370926091, 53],
 [16.773822, 35.262237, 7399998550, 1000, 362893206, 53],
 [16.918701, 35.567470, 7399998550, 1000, 359789678, 53],
 [16.701799, 35.113320, 7399998550, 1000, 364473497, 53],
 [16.822333, 35.367436, 7399998550, 1000, 361866306, 53],
 [16.740979, 35.196781, 7399998550, 1000, 363627193, 53],
 [16.816425, 35.352598, 7399998550, 1000, 361978711, 53],
 [16.956157, 35.646386, 7399998550, 1000, 358995951, 53],
 [16.797895, 35.315283, 7399998550, 1000, 362388025, 53],
 [16.844367, 35.411849, 7399998550, 1000, 361381339, 53],
 [16.995831, 35.725314, 7399998550, 1000, 358131218, 53],
 [16.951638, 35.635670, 7399998550, 1000, 359084373, 53],
 [16.954525, 35.644160, 7399998550, 1000, 359037700, 53],
 [16.693690, 35.094746, 7399998550, 1000, 364641097, 53],
 [16.616104, 34.930689, 7399998550, 1000, 366337804, 53],
 [16.798600, 35.316056, 7399998550, 1000, 362368504, 53],
 [16.655104, 35.014292, 7399998550, 1000, 365490006, 52],
 [16.686177, 35.077623, 7399998550, 1000, 364797052, 53],
 [16.690788, 35.086283, 7399998550, 1000, 364689896, 53],
 [16.585637, 34.868064, 7399998550, 1000, 367019658, 53],
 [16.539509, 34.769484, 7399998550, 1000, 368033166, 53],
 [16.749152, 35.210812, 7399998550, 1000, 363430409, 53],
 [16.530446, 34.752708, 7399998550, 1000, 368249276, 53],
 [17.026323, 35.796337, 7399998550, 1000, 357531025, 53]


])

b38Max = np.asarray([
    # gamma,       beta,          N,    I, max_infected, max_infected_i
    [16.763602, 35.241398, 7399998550, 1000, 363118410, 52],
    [16.926190, 35.584229, 7399998550, 1000, 359636578, 53],
    [16.842401, 35.407124, 7399998550, 1000, 361419954, 53],
    [16.782713, 35.281766, 7399998550, 1000, 362706067, 53],
    [16.840221, 35.403567, 7399998550, 1000, 361472980, 53],
    [16.915765, 35.562411, 7399998550, 1000, 359858838, 53],
    [16.842385, 35.407334, 7399998550, 1000, 361421761, 53],
    [16.866001, 35.457092, 7399998550, 1000, 360916362, 53],
    [16.865767, 35.457369, 7399998550, 1000, 360926045, 53],
    [16.862614, 35.451576, 7399998550, 1000, 360998591, 52],
    [16.854895, 35.435087, 7399998550, 1000, 361162338, 53],
    [17.131183, 36.016778, 7399998550, 1000, 355342483, 53],
    [16.704259, 35.119731, 7399998550, 1000, 364427463, 52],
    [16.909902, 35.547564, 7399998550, 1000, 359968417, 53],
    [16.934996, 35.598180, 7399998550, 1000, 359422173, 53],
    [16.902872, 35.534332, 7399998550, 1000, 360127429, 53],
    [16.607745, 34.914093, 7399998550, 1000, 366528295, 53],
    [16.734507, 35.175350, 7399998550, 1000, 363719712, 53],
    [16.533750, 34.759477, 7399998550, 1000, 368174598, 53],
    [16.884302, 35.495212, 7399998550, 1000, 360523047, 53],
    [16.656257, 35.012290, 7399998550, 1000, 365437252, 53],
    [17.028368, 35.796420, 7399998550, 1000, 357463051, 53],
    [16.800047, 35.320982, 7399998550, 1000, 362348791, 53],
    [17.277292, 36.321928, 7399998550, 1000, 352325715, 53],
    [16.814831, 35.350162, 7399998550, 1000, 362018600, 52]
])

c38Max = np.asarray([
    [17.266679, 36.300383, 7399998550, 1000, 352546725, 53],
    [16.593989, 34.885802, 7399998550, 1000, 366836065, 53],
    [16.803223, 35.326200, 7399998550, 1000, 362271408, 53],
    [16.667166, 35.037074, 7399998550, 1000, 365209561, 53],
    [16.541180, 34.776171, 7399998550, 1000, 368015972, 53],
    [17.074520, 35.898388, 7399998550, 1000, 356526055, 53],
    [16.778754, 35.272870, 7399998550, 1000, 362788154, 53],
    [16.796787, 35.307117, 7399998550, 1000, 362376308, 53],
    [16.822506, 35.367743, 7399998550, 1000, 361862239, 53],
    [16.870268, 35.467043, 7399998550, 1000, 360831037, 53],
    [16.772882, 35.262420, 7399998550, 1000, 362926784, 53],
    [16.655302, 35.018078, 7399998550, 1000, 365506604, 53],
    [16.752584, 35.217780, 7399998550, 1000, 363354422, 53],
    [16.765483, 35.244783, 7399998550, 1000, 363074184, 53],
    [16.841945, 35.406830, 7399998550, 1000, 361433777, 53],
    [17.024696, 35.793397, 7399998550, 1000, 357568040, 53],
    [16.854274, 35.432614, 7399998550, 1000, 361168558, 53],
    [16.729677, 35.171484, 7399998550, 1000, 363863408, 53],
    [17.109756, 35.963821, 7399998550, 1000, 355740923, 53],
    [16.831264, 35.385016, 7399998550, 1000, 361667016, 53],
    [16.730808, 35.172773, 7399998550, 1000, 363832109, 53],
    [16.631379, 34.965413, 7399998550, 1000, 366017599, 53],
    [16.413649, 34.509235, 7399998550, 1000, 370882943, 52],
    [16.670738, 35.047018, 7399998550, 1000, 365146392, 53],
    [16.699254, 35.106110, 7399998550, 1000, 364517566, 53]
])

def control_variate_exp(N=100):
    u = np.random.uniform(size=N)
    x = np.exp(u)
    mean_x, sigma_x = np.mean(x), np.std(x, ddof=1)
    z = x + (-0.14086/(1/12)) * (u - 0.5)
    mean_z, sigma_z = np.mean(z), np.std(z, ddof=1)
    ci_x = scipy.stats.t.ppf(0.975, N - 1) * mean_x / math.qrt(N)
    ci_z = scipy.stats.t.ppf(0.975, N - 1) * mean_z / math.qrt(N)
    print('crude mean: %f ± %f' % (mean_x, ci_x))
    print('control mean: %f ± %f' % (mean_z, ci_z))
    print('var(x)/var(z): %f' % (sigma_x / sigma_z)**2)
    return (mean_z, sigma_z, N)
def control_variate_est(data, c_hat,  verbose=False):
    N = data.shape[0]
    gamma = data[:, 0]
    beta = data[:, 1]
    infected = data[:, 4]

    if verbose:
        print(np.corrcoef(gamma, infected))
        print(np.corrcoef(beta, infected))

    #control = infected + c_hat * (gamma - np.mean(gamma))
    control = infected + c_hat * (beta - np.mean(beta))

    infected_mean = np.mean(infected)
    infected_std = np.std(infected, ddof=1)

    control_mean = np.mean(control)
    control_std = np.std(control, ddof=2)

    ci_control = scipy.stats.t.ppf(0.975, N - 1) * control_std / math.sqrt(N)
    ci_infected = scipy.stats.t.ppf(0.975, N - 1) * infected_std / math.sqrt(N)

    if verbose:
        print('crude mean: %f ± %f' % (infected_mean, ci_infected))
        print('control mean: %f ± %f' % (control_mean, ci_control))
        print('var(x)/var(z): %f' % (infected_std / control_std)**2)

    return (control_mean, control_std, N)

def unpaired_t_test(a_mean, a_std, a_n, b_mean, b_std, b_n):
    print("input: ", a_mean, a_std, a_n, b_mean, b_std, b_n)
    #s = math.sqrt((a_std**2 + b_std**2) / (a_n + b_n - 2 ))
    #t = (a_mean - b_mean) / math.sqrt(s**2 * (1 / a_n + 1 / b_n))
    #df = a_n + b_n - 4

    s = math.sqrt(a_std**2 / a_n + b_std**2 / b_n)
    df_top = (a_std**2 / a_n + b_std**2 / b_n)**2
    df_bottom = (a_std**2 / a_n)**2 / (a_n - 1) + (b_std**2 / b_n)**2 / (b_n - 1)
    df = df_top / df_bottom

    t = abs((a_mean - b_mean) / s)
    print(t, df)
    return 2 * (1 - scipy.stats.t.cdf(t, df))

X_0 = N0Max[:, 1]
Y_0 = N0Max[:, -2]

data = np.vstack((X_0, Y_0)).T
print(data)
print(data.shape)
lw = ShrunkCovariance(shrinkage=0.1)#LedoitWolf()
loglik_lw = lw.fit(data)
print("lw", lw.covariance_)
print("np", np.cov(data.T))
c_hat = - np.cov(X_0, Y_0)[1, 0] / np.var(X_0, ddof=1)
#c_hat = - lw.covariance_[1, 0] / (np.var(X_0, ddof=1))

mean_1, std_1, n_1 = control_variate_est(a38Max, c_hat, verbose=True)
mean_2, std_2, n_2 = control_variate_est(b38Max, c_hat, verbose=True)
print(mean_1, std_1, mean_2, std_2)

print("boom")
control_variate_est(np.vstack((a38Max, b38Max)), c_hat,verbose=True)

print("control p = {0:.10f}".format(unpaired_t_test(mean_1, std_1, n_1,
                                         mean_2, std_2, n_2)))
print("crude p = {0:.10f}".format(
    unpaired_t_test(np.mean(a38Max[:, -2]),
                    np.sqrt(np.var(a38Max[:, -2])),
                    a38Max.shape[0],
                    np.mean(c38Max[:, -2]),
                    np.sqrt(np.var(c38Max[:, -2])),
                    c38Max.shape[0])))

print(np.mean(a38Max[:, -2]) * 1e-6,
      np.mean(b38Max[:, -2]) * 1e-6,
      np.mean(c38Max[:, -2]) * 1e-6)
print(np.sqrt(np.var(a38Max[:, -2])) * 1e-6,
      np.sqrt(np.var(b38Max[:, -2])) * 1e-6,
      np.sqrt(np.var(c38Max[:, -2])) * 1e-6 )
#print("p = %.10f".format(unpaired_t_test(*control_variate_exp(), *control_variate_exp())))
